// Keywords: migration, dispersal

initialize() {
	initializeMutationRate(1e-7);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 2e6);
	initializeRecombinationRate(1e-7);
	
	//defineConstant("s", 0.1);
	//defineConstant("freqLo", 0.01);
	//defineConstant("freqHi", 0.02);
}

// Create the ancestral African population
1 { 
	defineConstant("simID", getSeed());
	sim.addSubpop("p1", 731); 
}

// Expand the African population to 14474
// This occurs 148000 years (5920) generations ago
10208 { p1.setSubpopulationSize(1447); }

// Split non-Africans from Africans and set up migration between them
// This occurs 51000 years (2040 generations) ago
10596 {
	sim.addSubpopSplit("p2", 186, p1);
	p1.setMigrationRates(c(p2), c(15e-4));
	p2.setMigrationRates(c(p1), c(15e-4));
}

// Split p2 into European and East Asian subpopulations
// This occurs 23000 years (920 generations) ago
10708 {
	sim.addSubpopSplit("p3", 55, p2);
	p2.setSubpopulationSize(103);  // reduce European size

	// Set migration rates for the rest of the simulation
	p1.setMigrationRates(c(p2, p3), c(2.5e-4, 0.78e-4));
	p2.setMigrationRates(c(p1, p3), c(2.5e-4, 3.11e-4));
	p3.setMigrationRates(c(p1, p2), c(0.78e-4, 3.11e-4));
}

10722 {
	sim.addSubpopSplit("p4", 80, p3);
}


fitness(m1, p1) { return 1.0; }
fitness(m1, p2) { return 1.0; }
fitness(m1, p3) { return 1.0; }
10785:10800 fitness(m1,p4) {return 1.0;}

10750 {
	sim.outputFull(outfile + ".i_"+ iter + ".tmp." + simID + ".txt");


	muts = sim.mutations;
	
	// pick a mutation within Â±10kb of the center of the locus
	// also condition on initial frequency in some range
	muts = muts[muts.position > 1e6-1e4];
	muts = muts[muts.position < 1e6+1e4];
	muts = muts[sim.mutationFrequencies(p4, muts) > freqLo];
	muts = muts[sim.mutationFrequencies(p4, muts) < freqHi];
	
	if (size(muts))
	{
		mut = sample(muts, 1);
		mut.setSelectionCoeff(s);
	}
	else
	{
		cat("No contender of sufficient frequency found.\n");
		sim.simulationFinished(); 
	}
	
		
	// Set migration rates for the rest of the simulation
}


10750:10800 {
	muts = sim.mutations;
	muts = muts[muts.selectionCoeff != 0];
	if (size(muts) == 0){
		// go back to generation 1000
		sim.readFromPopulationFile(outfile + ".i_"+ iter +".tmp." + simID + ".txt");
		
		// start a newly seeded run
		setSeed(rdunif(1, 0, asInteger(2^32) - 1));
		
		// re-introduce the sweep mutation
		muts = sim.mutations;
		muts = muts[muts.position > 1e6-1e4];
		muts = muts[muts.position < 1e6+1e4];
		muts = muts[sim.mutationFrequencies(p4, muts) > freqLo];
		muts = muts[sim.mutationFrequencies(p4, muts) < freqHi];
	
		if (size(muts))
		{
			mut = sample(muts, 1);
			mut.setSelectionCoeff(s);
		}
		else
		{
			cat("No contender of sufficient frequency found.\n");
			sim.simulationFinished(); 
		}
	}
}

10708:10800 {
	t = sim.generation - 10708;
	p2_size = round(103 * exp(0.038 * t));
	p3_size = round(55 * exp(0.048 * t));
	
	p2.setSubpopulationSize(asInteger(p2_size));
	p3.setSubpopulationSize(asInteger(p3_size));
}

10722:10800 {
	t = sim.generation - 10722;
	p4_size = round(80 * exp(0.050 * t));
	
	p4.setSubpopulationSize(asInteger(p4_size));
}

10785 {
	p4.setMigrationRates(p2,0.50);
}
10786 {
	p4.setMigrationRates(p2,0.00);
}

// Generation 58000 is the present.  Output and terminate.
10800 late() {
	//p1.outputSample(20); // YRI phase 3 sample of size 108
	//p2.outputSample(20); // CEU phase 3 sample of size 99
	//p3.outputSample(20); // CHB phase 3 sample of size 103
	//p4.outputSample(20); // CHB phase 3 sample of size 103
	muts = sim.mutations;
	muts = muts[muts.selectionCoeff != 0];
	catn(sim.mutationFrequencies(p1, muts));
	catn(sim.mutationFrequencies(p2, muts));
	catn(sim.mutationFrequencies(p3, muts));
	catn(sim.mutationFrequencies(p4, muts));

	inds = c(p1,p2,p3,p4).sampleIndividuals(20);
        inds.genomes.outputVCF(filePath=outfile+".i_"+ iter +'.vcf');
}

